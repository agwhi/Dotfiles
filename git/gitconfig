[core]
	excludesfile = ~/.gitignore_global
	editor = nvim
	autocrlf = input
	safecrlf = warn
	filemode = false
	ignorecase = false

[init]
	defaultBranch = main

[push]
	default = simple
	autoSetupRemote = true

[pull]
	rebase = true

[rebase]
	autoStash = true

[merge]
	ff = false

[diff]
	algorithm = patience
	indentHeuristic = true

[color]
	ui = auto

[alias]
	# Basic shortcuts
	st = status
	co = checkout
	br = branch
	ci = commit
	ca = commit -a
	cm = commit -m
	aa = add -A
	unstage = reset HEAD --
	last = log -1 HEAD

	# Log aliases
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	ll = log --oneline --graph --decorate
	llg = log --oneline --graph --decorate --all
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'

	# Branch management
	br-name = "!git rev-parse --abbrev-ref HEAD"
	new-branch = "!f() { git checkout -b \"$1\"; }; f"
	delete-branch = "!f() { git branch -d \"$1\"; git push origin --delete \"$1\"; }; f"

	# Stash shortcuts
	sl = stash list
	sa = stash apply
	sp = stash pop
	ss = stash push

	# Remote helpers
	remotes = remote -v
	upstream = "!f() { git branch --set-upstream-to=origin/$(git br-name) $(git br-name); }; f"

	# Cleanup
	cleanup = "!f() { git branch --merged | grep -v '\\*\\|main\\|master\\|develop' | xargs -n 1 git branch -d; }; f"
	prune-remote = "!f() { git remote prune origin; }; f"

	# Work in progress
	wip = "!f() { git add -A && git commit -m \"WIP: $1\"; }; f"
	unwip = "!f() { git log -n 1 | grep -q -c \"WIP\" && git reset HEAD~1; }; f"

	# Diff helpers
	diffstat = diff --stat
	diffcached = diff --cached
	diffstaged = diff --cached

	# Show info
	whoami = "!git config user.name && git config user.email"
	showfiles = "!f() { git show --name-only --pretty=format: \"$1\"; }; f"

[help]
	autocorrect = 1

[rerere]
	enabled = true

[fetch]
	prune = true

[include]
	path = ~/.gitconfig.local